/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   tests_main_010.test                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: saaltone <saaltone@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/02/01 14:15:03 by saaltone          #+#    #+#             */
/*   Updated: 2022/03/09 17:53:59 by saaltone         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../libft/includes/libft.h"
#include <stdio.h>

static void	superint_init_zeros(t_superint **superint)
{
	int	i;

	i = 0;
	while (i < (*superint)->allocated)
	{
		((*superint)->numbers)[i] = 0;
		i++;
	}
}

t_superint	*ft_superint_new(t_ull start, int count)
{
	t_superint	*superint;

	superint = (t_superint *)malloc(sizeof(t_superint));
	if (!superint)
		return (NULL);
	superint->allocated = count;
	superint->count = 1;
	superint->numbers = (int *)malloc(sizeof(int) * count);
	if (!(superint->numbers))
		return (NULL);
	superint_init_zeros(&superint);
	(superint->numbers)[0] = start % 1000000000;
	if (start >= 1000000000)
	{
		start /= 1000000000;
		(superint->numbers)[1] = start % 1000000000;
		superint->count++;
	}
	if (start >= 1000000000)
	{
		start /= 1000000000;
		(superint->numbers)[2] = start % 1000000000;
		superint->count++;
	}
	return (superint);
}

void	ft_superint_destroy(t_superint	**superint)
{
	if (!(*superint))
		return ;
	if ((*superint)->numbers)
		free((*superint)->numbers);
	free(*superint);
}

/*
 * Doubles the allocated area of superint and copies values over.
*/
int	ft_superint_expand(t_superint **addto)
{
	int			i;
	t_superint	*expanded;

	expanded = ft_superint_new(0, (*addto)->allocated * 2);
	if (!expanded)
		return (0);
	i = 0;
	while (i < (*addto)->count)
	{
		expanded->numbers[i] = (*addto)->numbers[i];
		i++;
	}
	ft_superint_destroy(addto);
	*addto = expanded;
	return (1);
}

int ft_superint_plus(t_superint **addto, t_superint **add)
{
	t_ull	temp;
	t_ull	carry;
	int		i;

	i = -1;
	carry = 0;
	while (++i < (*add)->count || carry)
	{
		if ((*addto)->allocated < i - 1 && !ft_superint_expand(addto))
			return (0);
		temp = ((t_ull) (*addto)->numbers[i]);
		if (i < (*add)->count)
			temp += ((t_ull) (*add)->numbers[i]);
		temp += carry;
		carry = 0;
		if (temp >= 1000000000)
			carry = temp / 1000000000;
		if (temp >= 1000000000)
			(*addto)->numbers[i] = temp % 1000000000;
		else
			(*addto)->numbers[i] = temp;
		if (i > (*addto)->count - 1)
			(*addto)->count++;
	}
	return (1);
}

static void	set_to_zero(t_superint **superint)
{
	int	i;

	i = (*superint)->count - 1;
	while (i >= 0)
	{
		(*superint)->numbers[i] = 0;
		i--;
	}
	(*superint)->count = 1;
}

int ft_superint_minus(t_superint **from, t_superint **minus)
{
	t_sll	temp;
	t_ull	carry;
	int		i;

	i = -1;
	carry = 0;
	while (++i < (*minus)->count || carry)
	{
		if (i > (*from)->count - 1)
		{
			set_to_zero(from);
			return (0);
		}
		temp = (t_sll)(*from)->numbers[i];
		if (i < (*minus)->count)
			temp -= (t_sll)(*minus)->numbers[i];
		temp -= carry;
		carry = 0;
		if (temp < 0)
		{
			(*from)->numbers[i] = 1000000000 + temp;
			carry = -temp;
		}
		else
			(*from)->numbers[i] = temp;
	}
	return (1);
}

void ft_superint_print(t_superint **superint)
{
	int	i;
	int	j;
	int	temp;
	int	temp2;

	i = (*superint)->count - 1;
	while (i >= 0)
	{
		temp = (*superint)->numbers[i];
		j = 100000000;
		while (j > 0)
		{
			temp2 = temp / j;
			ft_putchar('0' + temp2);
			temp -= temp2 * j;
			j /= 10;
		}
		i--;
	}
	ft_putchar('\n');
}

int ft_superint_multiply(t_superint **from, t_superint **minus)
{

}

int	main(void)
{
	t_superint	*n;
	t_superint	*d;
	//t_superint	*a;

	n = ft_superint_new(4, 10);
	d = ft_superint_new(0, 10);
	///a = ft_superint_new(1ULL, 1);

	//printf("allocated: %d count: %d 1st: %d 2nd: %d 3rd: %d\n", n->allocated, n->count, n->numbers[0], n->numbers[1], n->numbers[2]);
	ft_superint_minus(&n, &d);
	//printf("allocated: %d count: %d 1st: %d 2nd: %d 3rd: %d\n", n->allocated, n->count, n->numbers[0], n->numbers[1], n->numbers[2]);
	ft_superint_plus(&n, &d);
	printf("allocated: %d count: %d 1st: %d 2nd: %d 3rd: %d\n", n->allocated, n->count, n->numbers[0], n->numbers[1], n->numbers[2]);
	ft_superint_print(&n);

	ft_superint_destroy(&n);
	ft_superint_destroy(&d);

	return (0);
}
