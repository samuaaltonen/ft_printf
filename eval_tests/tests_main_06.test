/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   tests_main_06.test                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: saaltone <saaltone@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/02/01 14:15:03 by saaltone          #+#    #+#             */
/*   Updated: 2022/02/08 14:14:15 by saaltone         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"

#ifndef PRINTF_TESTS_H

#define PRINTF_TESTS_H
#define COLOR_GREEN "\033[0;32m"
#define COLOR_RED "\033[0;31m"
#define COLOR_PURPLE "\033[0;35m"
#define COLOR_CYAN "\033[0;36m"
#define COLOR_RESET "\033[0m"

#include <stdio.h>

#endif

int	main(void)
{
	printf("%sOctal with # flag (prefixing a 0 if it was not zero already). Any non-zero number:\n", COLOR_RESET);
	printf("%s%#o\n", COLOR_CYAN, 123);
	ft_printf("%s%#o\n", COLOR_PURPLE, 123);

	printf("%s\nOctal with # flag (prefixing a 0 if it was not zero already). Zero:\n", COLOR_RESET);
	printf("%s%#o\n", COLOR_CYAN, 0);
	ft_printf("%s%#o\n", COLOR_PURPLE, 0);

	printf("%s\nHexadecimal with # flag (prefixing a 0x / 0X). Any non-zero number:\n", COLOR_RESET);
	printf("%s%#x\n", COLOR_CYAN, 16777215);
	ft_printf("%s%#x\n", COLOR_PURPLE, 16777215);
	printf("%s%#X\n", COLOR_CYAN, 16777215);
	ft_printf("%s%#X\n", COLOR_PURPLE, 16777215);

	printf("%s\nHexadecimal with # flag (prefixing a 0x / 0X). Zero:\n", COLOR_RESET);
	printf("%s%#x\n", COLOR_CYAN, 0);
	ft_printf("%s%#x\n", COLOR_PURPLE, 0);
	printf("%s%#X\n", COLOR_CYAN, 0);
	ft_printf("%s%#X\n", COLOR_PURPLE, 0);

	printf("%s\nZero padded value, number with 3 zero-padding (%%03d):\n", COLOR_RESET);
	printf("%s%03d\n", COLOR_CYAN, 42);
	ft_printf("%s%03d\n", COLOR_PURPLE, 42);
	printf("%s%03d\n", COLOR_CYAN, 0);
	ft_printf("%s%03d\n", COLOR_PURPLE, 0);

	printf("%s\nZero padded value, negative number with 3 and 5 zero-padding (%%03d). Note that the zero count is 1 less than with positive numbers:\n", COLOR_RESET);
	printf("%s%03d\n", COLOR_CYAN, -42);
	ft_printf("%s%03d\n", COLOR_PURPLE, -42);
	printf("%s%05d\n", COLOR_CYAN, -42);
	ft_printf("%s%05d\n", COLOR_PURPLE, -42);

	printf("%s\nZero padded value, number with 3 zero-padding but number is bigger than 3 digits (%%03d):\n", COLOR_RESET);
	printf("%s%03d\n", COLOR_CYAN, 1234);
	ft_printf("%s%03d\n", COLOR_PURPLE, 1234);
	printf("%s%03d\n", COLOR_CYAN, -1234);
	ft_printf("%s%03d\n", COLOR_PURPLE, -1234);

	printf("%s\nZero padded value, number with 0 zero-padding (%%00d):\n", COLOR_RESET);
	printf("%s%00d\n", COLOR_CYAN, 1234);
	ft_printf("%s%00d\n", COLOR_PURPLE, 1234);
	printf("%s%00d\n", COLOR_CYAN, 0);
	ft_printf("%s%00d\n", COLOR_PURPLE, 0);

	printf("%s\nBoth, - and 0 flags. - should override 0. Positive, zero, negative and also different order of flags:\n", COLOR_RESET);
	// Trick compiler error checking (to not get error: flag '0' is ignored when flag '-' is present [-Werror,-Wformat])
	char	*format_trick = "%s%-010d%c\n";
	printf(format_trick, COLOR_CYAN, 1234, '|');
	ft_printf(format_trick, COLOR_PURPLE, 1234, '|');
	printf(format_trick, COLOR_CYAN, 0, '|');
	ft_printf(format_trick, COLOR_PURPLE, 0, '|');
	printf(format_trick, COLOR_CYAN, -1234, '|');
	ft_printf(format_trick, COLOR_PURPLE, -1234, '|');
	char	*format_trick2 = "%s%0-10d%c\n";
	printf(format_trick2, COLOR_CYAN, 1234, '|');
	ft_printf(format_trick2, COLOR_PURPLE, 1234, '|');
	printf(format_trick2, COLOR_CYAN, 0, '|');
	ft_printf(format_trick2, COLOR_PURPLE, 0, '|');
	printf(format_trick2, COLOR_CYAN, -1234, '|');
	ft_printf(format_trick2, COLOR_PURPLE, -1234, '|');

	printf("%s\n- and 0 flags with width (3) less than digit count (4):\n", COLOR_RESET);
	char	*format_trick3 = "%s%-03d%c\n";
	printf(format_trick3, COLOR_CYAN, 1234, '|');
	ft_printf(format_trick3, COLOR_PURPLE, 1234, '|');

	printf("%s\nBlank flag (A blank should be left before a positive number (or empty string)):\n", COLOR_RESET);
	printf("%s%c% d%c\n", COLOR_CYAN, '|', 42, '|');
	ft_printf("%s%c% d%c\n", COLOR_PURPLE, '|', 42, '|');
	printf("%s%c% d%c\n", COLOR_CYAN, '|', -42, '|');
	ft_printf("%s%c% d%c\n", COLOR_PURPLE, '|', -42, '|');

	printf("%s\nBlank flag when width (5) is less than digit count (6):\n", COLOR_RESET);
	printf("%s%c% 5d%c\n", COLOR_CYAN, '|', 123456, '|');
	ft_printf("%s%c% 5d%c\n", COLOR_PURPLE, '|', 123456, '|');

	printf("%s\nBlank flag when width (7) is more than digit count (6):\n", COLOR_RESET);
	printf("%s%c% 7d%c\n", COLOR_CYAN, '|', 123456, '|');
	ft_printf("%s%c% 7d%c\n", COLOR_PURPLE, '|', 123456, '|');

	printf("%s\n+ flag. Adds sign before number (even with positives):\n", COLOR_RESET);
	printf("%s%c%+d%c\n", COLOR_CYAN, '|', 42, '|');
	ft_printf("%s%c%+d%c\n", COLOR_PURPLE, '|', 42, '|');
	printf("%s%c%+d%c\n", COLOR_CYAN, '|', -42, '|');
	ft_printf("%s%c%+d%c\n", COLOR_PURPLE, '|', -42, '|');
	printf("%s%c%+d%c\n", COLOR_CYAN, '|', 0, '|');
	ft_printf("%s%c%+d%c\n", COLOR_PURPLE, '|', 0, '|');

	printf("%s\n+ flag with width (7) and digit count (6):\n", COLOR_RESET);
	printf("%s%c%+7d%c\n", COLOR_CYAN, '|', 123456, '|');
	ft_printf("%s%c%+7d%c\n", COLOR_PURPLE, '|', 123456, '|');

	printf("%s\n+ flag with width (5) and digit count (6):\n", COLOR_RESET);
	printf("%s%c%+5d%c\n", COLOR_CYAN, '|', 123456, '|');
	ft_printf("%s%c%+5d%c\n", COLOR_PURPLE, '|', 123456, '|');

	printf(COLOR_RESET);
	return (0);
}
